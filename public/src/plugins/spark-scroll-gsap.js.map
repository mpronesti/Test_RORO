{"version":3,"sources":["plugins/spark-scroll-gsap.coffee"],"names":[],"mappings":"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","file":"plugins/spark-scroll-gsap.js","sourceRoot":"/source/","sourcesContent":["class Actor\n  constructor: (@tl, @context) ->\n    @frames = []\n    @frameHash = {}\n    @normalizedFrames = []\n\n  normalizeFrames: ->\n    @normalizedFrames = _.sortBy(_.cloneDeep(@frames), 'scrollY')\n\n    # frame inheritance\n    _.forEach @normalizedFrames, (frame, index, arr) ->  # @todo: regular for loop would be faster?\n      _.defaults(frame.anims, arr[index-1].anims) if index\n    @\n\n  keyframe: (scrollY, anims, ease) ->\n    frame =\n      scrollY: scrollY\n      anims: anims\n      ease: ease\n    @frames.push(frame)\n    @frameHash[scrollY] = frame\n    @\n    \n  buildTimeline: ->\n    @tl.clear()\n    _.forEach @normalizedFrames, (frame, index, arr) =>\n      if index\n        prevFrame = arr[index-1]\n\n        # for easing, instead of this:\n        # @tl.fromTo(@context, frame.scrollY - prevFrame.scrollY, prevFrame.anims, frame.anims, prevFrame.scrollY)\n\n        # ...do this:\n        # creating a new fromTo for each property to support per-property easing\n        # this seems pretty inefficient\n        duration = frame.scrollY - prevFrame.scrollY\n        for k,v of frame.anims\n          a = {}\n          pa = {}\n          a[k] = v\n          a.ease = frame.ease[k]\n          pa[k] = prevFrame.anims[k]\n          @tl.fromTo(@context, duration, pa, a, prevFrame.scrollY)\n          @tl.pause()\n      return true\n    @\n    \n  finishedAddingKeyframes: ->\n    @normalizeFrames()\n    @buildTimeline()\n    @\n\n  moveKeyframe: (oldPos, newPos) ->\n    frame = @frameHash[oldPos]\n    @frameHash[newPos] = frame\n    frame.scrollY = newPos\n    delete @frameHash[oldPos]\n    @normalizeFrames()\n    @buildTimeline()  # todo: use change detection to optimize ?\n    @\n\n  removeAllKeyframes: ->\n    @tl.clear()\n    @frames = []\n    @\n\n\nclass GSAPAnimator\n  constructor: ->\n    @tl = new TimelineLite({useFrames:true})\n\n  addActor: (options) ->\n    @context = options.context\n    @actor = new Actor(@tl, @context)\n\n  update: (pos) ->\n    @tl.seek(pos, false) if pos>=0 # It balks at negative pos values\n    @\n\n\nangular.module('gilbox.sparkScroll').factory 'sparkAnimator', ->\n  instance: ->\n    new GSAPAnimator()"]}